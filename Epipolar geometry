#include <stdio.h>
#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <opencv2/opencv.hpp>
using namespace cv;

int main( int argc, char** argv ){
double max_dist = 0; double min_dist = 100;
  if(argc != 3 ){
 	return -1; 
  }

  Mat img_1 = imread( argv[1], CV_LOAD_IMAGE_GRAYSCALE );
  Mat img_2 = imread( argv[2], CV_LOAD_IMAGE_GRAYSCALE );

  if(!img_1.data || !img_2.data ){ 
	std::cout<< " --(!) Error reading images " << std::endl; return -1; 
  }

  //-- Step 1: Detect the keypoints using SURF Detector
  int minHessian = 400;

  SurfFeatureDetector detector(minHessian);

  std::vector<KeyPoint> keypoints_1, keypoints_2;

  detector.detect(img_1, keypoints_1);
  detector.detect(img_2, keypoints_2);

  Mat fund = findFundamentalMat(keypoints_1, keypoints_2);

  //-- Step 2: Calculate descriptors (feature vectors)
  SurfDescriptorExtractor extractor;

  Mat descriptors_1, descriptors_2;

  extractor.compute( img_1, keypoints_1, descriptors_1 );
  extractor.compute( img_2, keypoints_2, descriptors_2 );

  //-- Step 3: Matching descriptor vectors using FLANN matcher
  FlannBasedMatcher matcher;
  std::vector< DMatch > matches;
  matcher.match( descriptors_1, descriptors_2, matches );  

  //-- Quick calculation of max and min distances between keypoints
  for(int i = 0; i < descriptors_1.rows; i++ ){ 
	double dist = matches[i].distance;
    	if( dist < min_dist ) min_dist = dist;
    	if( dist > max_dist ) max_dist = dist;
  }

  printf("-- Max dist : %f \n", max_dist );
  printf("-- Min dist : %f \n", min_dist );

  //-- Draw only "good" matches (i.e. whose distance is less than 2*min_dist,
  //-- or a small arbitary value ( 0.02 ) in the event that min_dist is very
  //-- small)
  //-- PS.- radiusMatch can also be used here.
  std::vector< DMatch > good_matches;

  for(int i = 0; i < descriptors_1.rows; i++ ){
	if( matches[i].distance <= max(2*min_dist, 0.02) ){
	good_matches.push_back( matches[i]); 
	}
  }
//////////////////////////////////////////////////////////////
 
 cv::Rect rect1(0,0, img_1.cols, img_1.rows);
 cv::Rect rect2(img_1.cols, 0, img_1.cols, img_1.rows);

 cv::computeCorrespondEpilines(keypoints_1, 1, fund, epilines1);
 cv::computeCorrespondEpilines(keypoints_2, 2, fund, epilines2);
 CV_Assert(keypoints_1.size() == keypoints_2.size() && keypoints_2.size() == epilines1.size() && epilines1.size() == epilines2.size());
	
  for(i=0; i< keypoints_1.size(); i++){
   if(inlierDistance > 0){
      if(distancePointLine( keypoints_1[i], epilines2[i]) > inlierDistance ||
       distancePointLine( keypoints_2[i], epilines1[i]) > inlierDistance){
        //The point match is no inlier
        continue;
      }
    }
    //Epipolar lines of the 1st point set are drawn in the 2nd image and vice-versa
    cv::line(outImg(rect2)),
      cv::Point(0,-epilines1[i][2]/epilines1[i][1]),
      cv::Point(img_1.cols,-(epilines1[i][2]+epilines1[i][0]*img_1.cols)/epilines1[i][1]), color);
    cv::circle(outImg(rect1),  keypoints_1[i], 3, color, -1, CV_AA);
 
    cv::line(outImg(rect1)),
      cv::Point(0,-epilines2[i][2]/epilines2[i][1]),
      cv::Point(img_2.cols,-(epilines2[i][2]+epilines2[i][0]*img_2.cols)/epilines2[i][1]),color);
    cv::circle(outImg(rect2),  keypoints_2[i], 3, color, -1, CV_AA);
  }
  cv::imshow(title, outImg);
  cv::waitKey(1); 

//This part was already in the code but I think we dont need it since it only draws the matches between 2 pictures (and not te epilines)
  //-- Draw only "good" matches
  // Mat img_matches;
  //drawMatches( img_1, keypoints_1, img_2, keypoints_2,
  //           good_matches, img_matches, Scalar::all(-1), Scalar::all(-1),
  //         vector<char>(), DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS );

  //-- Show detected matches
  //imshow( "Good Matches", img_matches );

  //for( int i = 0; i < (int)good_matches.size(); i++ )
  //{ printf( "-- Good Match [%d] Keypoint 1: %d  -- Keypoint 2: %d  \n", i, good_matches[i].queryIdx, good_matches[i].trainIdx ); }

  //waitKey(0);
  //imwrite("good_matches.jpg", img_matches);

  return 0;

 template <typename T>
 static float distancePointLine(const cv::Point_<T> point, const cv::Vec<T,3>& line){
   Line is given as a*x + b*y + c = 0
   return std::fabsf(line(0)*point.x + line(1)*point.y + line(2))
      std::sqrt(line(0)*line(0)+line(1)*line(1));
 }

}
